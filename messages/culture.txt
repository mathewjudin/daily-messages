<b>Rough starts are normal at Qxf2</b> If you are feeling not-good-enough, remind yourself that most employees have rough starts at Qxf2. After all, you are transitioning into a very different way of working that requires you to change, learn and unlearn many things. You should also know that it gets better over time and sometimes even fun(!) when you get used to our system of working.
<b>How to succeed in your first few weeks with Qxf2</b> The traits that will let you successfully navigate the initial phase with Qxf2 do not require talent. Key traits among the successful Qxf2 employees were: >a) showing up daily (well, virtually)>b) being open about their difficulties at work  >c) being willing to change their habits.  So, keep trying every day, be open about your difficulties and be willing to change.
<b>How are you judging me?</b> We will not judge you based on your knowledge or achievements at this stage of your relationship with Qxf2. Why? Because you are transitioning from one system of work into another. That means you need to unlearn, learn and piece together multiple habits before you are productive. Instead, we are judging you based on your effort, the openness that you show in asking for help and your ability to adapt. Do that and you will find things will work out over well the coming months.
<b>Its not only you</b> New hires think they are the only ones struggling to get a handle on their work while everyone else has figured it out. Not really. The rest of us look comfortable only because we have made peace with high levels of ambiguity and complexity. At some point, you are going to realize that each of us are on our own journey of learning, unlearning, doing and failing.
<b>Failure despite effort</b> Qxf2 is a stressful environment until you learn multiple new habits and the compounding effect of those habits kick in. Until then, you are going to repeatedly fail despite trying hard. We know failing repeatedly over a long enough period of time is highly stressful for professionals. We have taken several steps to make failure-despite-effort less stressful. For example, we have tried to make failing-despite-effort as non-punitive as possible. We are also very receptive to hearing about your failures. So feel safe to try your best and come up short.
<b>Adaptive vs Technical challenges</b> Technical challenges are solved by knowledge and training. But there are some challenges that evolve as you solve them. These are adaptive challenges. Parenting is probably is the most relatable example of an adaptive challenge. Adaptive challenges not only need technical skills but they also need constant engagement, fresh mindsets and ever-improving mental models. As you continue your journey through Qxf2, remember this critical distinction. It is not enough that you just execute the tasks given to you. You need to periodically introspect and evaluate if the work is changing your habits, mindset and perspective.
<b>A tip for your first year</b> I have a simple tip to make your first year at Qxf2 so much easier. Stop asking what-is-the-use-of-doing-X? and just do X. Its ok if nobody else you know outside of Qxf2 is doing X. Over time, you will notice that doing X had multiple benefits that neither you nor me could have predicted (called emergent-behavior in a complex system) and you will be better off for having tried.
<b>We shape our buildings, thereafter they shape us. â€• Winston Churchill</b> Early employees are expected to actively contribute to company design. I usually describe this task as help-me-build-the-company during interviews. Understandably, for most people, this is a little too vague. But as early employees, hopefully, you are starting to realize a company and its culture gets built over time - either consciously or by default. I find this topic fascinating and I suspect if you spent some time Googling about it, you would too!
<b>Bad beginnings</b> Our schooling did a great job of instilling values of hardwork, discipline, logical thinking and holding ourselves to high standards. I wish they had taken the time to explain that those characteristics are good in most context but not all! A specific context where most of those supposed strengths fail is when you attempt to do something new. You can get over this bias though. The next time you start something new, remind yourself that it is natural to struggle and be clueless when doing new things.
<b>There is no happily every after</b> As you progress within Qxf2, hopefully, you are adding new technqiues and capabilities to your testing toolbelt. If you have worked elsewhere before, you might even start wondering what the happily-ever-after scenario will look like. While this may seem like a good question, make peace with leaving it unanswered. I feel like the question comes from societal conditioning. We have always been told that if we work hard during insert-critical-life-phase-here, things will become easy after that. Instead of adopting this (imo) poor mental model, just view learning as a side-effect of solving problems and dont really worry about where all this is going to culminate.
<b>What is a good failure?</b> As of Jun 2020, I think a good failure has four components. One, the person/people working made a sincere effort to do what they can and then looked foolish or incompetent. Two, the failure leads to situational insights, mindset improvements and technical improvements. Three, the failure exposes more than one problem within Qxf2 ... not just improvements of the individual(s) involved. Four, there is an appetite to rightthe failure.
<b>Mixed bag is not the same as mediocre</b> A mixed bag has high-highs and low-lows. Mediocre performance is when you are average all through - you neither impress nor annoy. When I say it is ok to fail at clients, I am implicitly assuming there are already some things you do well. If you fail at a specific task because you chose something new, it will be ok because nobody is expected to be good at everything. A mixed bag of performance has tremendous upside for Qxf2 and your own career.
<b>One of the great challenges of the game is how to make progress when there are no obvious moves, when action is required not reaction. - Gary Kasparov</b> This is true not only in chess but in our careers as well. When things are going smooth, we seem to want to coast. Its ok to coast for a while, especially after a hecticrelease. But over the long term, make sure your are exploring newproblems regularly.
<b>Your technical powers and test ideas are supposed co-evolve</b> Your QA output should not be your previous job output plus one or two new tools. We are not trying to do your old job in an automated way. Instead, technical skills should expand the scope of what a QA engineer can do. All the technical skill and tooling you pick up is supposed to help you probe the software being tested in a more effective way. As you become more technical, you should be able to conduct tests that you previously could not even imagine. You should be able to understand nuances of implementations and vary your tests accordingly. If you have been here for a couple of years and your testing outlook has not evolved beyond _manual + automation_, please talk to you 1:1 manager and/or experienced colleagues.
<b>We test early stage products</b> This is different from testing mature products with an established user base. A big difference happens to be that speed is critical to an early stage product.  Early stage products are still discovering their user base and the kind of solution that scales. They need to run several experiments and iterate many times before they land upon a solution that will work. The quicker they can run these experiments, the better their odds of survival are. So when you test early stage products, think of how you can improve their speed to market.
<b>Be resourceful at a client</b>We work with early stage products and small engineering teams. More warm bodies and process heavy methodologies and more meetings are very rarely the answer. You cannot expect thorough documentation or access to a business analyst or product manager who has loads of time to spend with you. Everyone is busy and tasked with more work than they can handle. Instead of retreating into a shell and waiting for your client to unblock you, you need to be observant and resourceful. Think on your own and try things out. If needed, ask on the Qxf2 channel for help.
<b>When you do not understand something in a conversation ...</b> ... do NOT get into the habit of thinking that you will learn about the topic when you have time and then speak up in the coming days. Instead, first try to pay attention even if you seem lost. Second, in most cases, clarify or admit you do not understand on the call. Especially if the task is going to fall to you. Third, make it a daily habit to expose yourself to new things.
<b>How to start at a brand new client</b> You are expected to follow this approach https://qxf2.com/where-start-testing if you are new to Qxf2. The outline in that document will help you understand the product you are testing better while also letting you make decisions on how to proceed with testing. The document there is not some checkbox that you do as an exercise once within Qxf2 and then forget when you land at a client. If you are new to Qxf2, please make sure you are following that methodology. If you have worked at Qxf2 for a while, please ensure new people follow the approach at clients.
<b>Generalize your learning</b>A great way to keep up with ever-changing technologies is to generalize your learning. Generalizing lets you abstract many things into one concept. It helps you associate new tools with existing ones and brings down your cognitive load. For example, if I learnt to configure a Jenkins job, I would generalize my learning as follows. Jenkins solves the problem of a gigantic code merge by letting people continually integrate their code to the codebase in small increments. It does this by removing the need of having a human do a build-test-merge. Instead, it provided a web interface to write and execute shell commands before and after a build. If you can get to that level of abstraction, any new CI tool can be tackled easily. You simply have to figure out what interface the new tool provides and how to describe your buil-test-merge steps in that tool.
<b>Please work on communicating your testing better</b> Start with the summary. Then explain _what_ you tested but also _how_ you tested. If needed, use screenshots and tables and bulleted lists. And finally, focus on your English too! Language matters. I see (me especially!) us use English poorly. We often use pronouns (this, that, it, etc.) when we should be using better words to describe what we want to express. Please make an attempt to improve. When you catch yourself using words like this/that/it/those, etc., substitute such determiners/pronouns with whatever actual thing you want. Example: _I clicked that button and it did not work_ vs _I clicked the compose button but the email composer window did not show up_
<b>Technical QA != Automation</b>Please do not equate writing automation to being technical. Technical QA involves being able to understand systems and design tradeoffs, adhere to good engineering principles, perform complex setup operations, create tools to enable other QA and much more. I want us to be technical QA. That is very different from wanting folks who can write automated tests.
<b>Too much of a good thing ...</b> Please do not overdo good things like working extra hours or working weekends to help us succeed or skipping your alloted PTO. The reason I do not want too much of such behavior is because it tends to mask deeper organizational problems like poor planning, understaffing, exploitative bosses, etc. You might occasionally need to do stuff like stretching your work hours, replying to messages in your off-hours or working on weekends. Thats ok. But when you do, please call it out explicitly on a public channel.
<b>Companies do not go obsolete ... employees do.</b>ITeS companies in India have the reputation of doing outdated work. The media and our peers tend to talk of them as going obsolete. I have news for you. Every major Indian ITeS provider has been around for more than three decades. They evolved and remained relevant from the pre-Internet era to today. But most employees who did very well for these companies ended up becoming obsolete with every new wave of technology. This happened because they passively executed what their client or boss wanted. Do not make the same mistake. Make sure you are choosing tasks that simultaneously benefit your client, Qxf2 and *you*.