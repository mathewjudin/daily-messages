messages = [
    "<b>Welcome to the training program by Qxf2!</b> I am Qxf2Bot. I post messages every day to help you in this journey. Please think about the content posted and feel free to ask your trainers questions about them.",
    "<b>Learning to learn</b> Learning how to learn is the main skill that you should expect to pick up from this course. Technology and work will continue to evolve. There is no way for you to know every single technology that your potential employers will need. But you can become good at learning quickly. As you proceed through this training course, keep asking yourself if you are learning to learn.",
    "<b>The very first recorded bug</b> Fun fact. The first computer bug was an actual insect! https://thenextweb.com/shareables/2013/09/18/the-very-first-computer-bug/#.tnw_RmimDMmX",
    "<b>30 years as a tester</b>: This is one of the best testing related talk Team Qxf2 has heard. It made us think about the factors influencing our career, common distractions and the advice towards to the end was immediately applicable to our careers. I hope you find time to watch this talk! https://www.youtube.com/watch?v=mi5R3mOILrw",
    "<b>Zero days</b> A zero-day is a day where you are applying nothing new. During this training program, please try your best to put in at least a little time every day. Try your best to avoid too many zero days. Ideally, you would put in one hour on weekdays and around eight hours in total over the weekend.",
    "<b>Learning new things can be stressful</b> Often times, we are extremely harsh on ourselves when we are new to something. So, while you are in this program, I want to remind you to be nice to yourself. Stop comparing yourself to some ideal in your head. Instead, look at the amount of progress you have made since you started in terms of thinking, technology and troubleshooting.",
    "<b>Learning and discomfort</b> Great job fighting through all the discomfort! Remember that it is important to spend 13 hours a week. Just complete what you can in those 13 hours. The remaining tickets can spill over to the next week.",
    "<b>Helsinki bus theory</b> Do you feel like you are doing tutorial after tutorial and never getting anywhere? Team Qxf2 enjoyed this article and the specific advice on staying on the bus! https://petapixel.com/2013/03/13/the-helsinki-bus-station-theory-finding-your-own-vision-in-photography/",
    "<b>Reach out to ex-colleagues</b> Finding colleagues you like working with is difficult as you get more experienced. So try keeping in touch with ex-colleagues you liked working with. Share some of the articles you are reading that you find interesting. Or just pick up a phone and start a conversation.",
    "<b>Reminder!</b> This is your reminder to be nice to yourself. You are learning new skills, new technology, new approaches and new thinking everyday. We understand that is a lot of stress. So our advice to you today is simply this - give yourself the permission to try things and fail.",
    "<b>The Bored QA</b> When you have 5-10 days between tasks, please visit The Bored QA and try out one of our exercises. You can also use it as a fun way to start conversations with your team. https://the-bored-qa.qxf2.com/",
    "<b>Short-term stress</b>This course was designed to place a lot of short term stress upon you. But if you put in the time, I promise you that you will look back at this period fondly. You will find it worth it. I say this from experience. Some of the hardest projects I have worked on were not fun in the moment. But they are the ones that shaped my career and I look back at them with pride.",
    "<b>Star repositories you use</b> Make sure to star repositories that you use often. Over time, your own GitHub profile will look more real and natural to recruiters scanning your GitHub!",
    "<b>Bad output is better than no output</b> Good on you for choosing to change! I know that there are days trainees persist and struggle and there are days you might have given up. You know what? That is a totally human reaction to change. Improvement is not linear. Change is often two steps forward and one step back. So if the going seemed too tough for a few days, remind yourself that every learner goes through such phases and just start off from where you left off.",
    "<b>Selenium's first announcement</b> Selenium has helped thousands of testers start on a more technical path. This non-descript looking post announced Selenium to the world showing that many important things are rarely flashy or met with hysteria! https://web.archive.org/web/20041029143250/http://www.io.com/~wazmo/blog/archives/2004_10.html",
    "<b>Information overload</b> Great job struggling through this course! It is common for our trainees to feel overwhelmed with new information. It is also natural for them to think `There is so much to learn! Am I going to be spending my nights and weekends just learning?`. Well, the good news is NO! Initially, you don't have much to relate your learning to. So everything we show you looks like a separate piece of data. But over time, you will begin to see patterns and notice connections that will make picking up new things extremely fast! I liken this experience to learning to drive a car. Initially, you are uncomfortable and need to focus on the road ahead of you and cannot drink in the sights. But over time, driving becomes subconscious and you are able to enjoy the scenery.",
    "<b>Hitting the high notes</b> Team Qxf2 likes the thoughts in this article about hiring in software engineering. If you are ever in a position to hire folks the ideas in this article are interesting. This is one of those old articles that most software engineers should read. https://www.joelonsoftware.com/2005/07/25/hitting-the-high-notes/",
    "<b>Putting in the time</b> There is only one way to get better at troubleshooting - by putting in the time. Everyone comfortable with tech got good at troubleshooting problems one problem at a time. The next time you meet someone who is really good at tech, ask them how they got good at troubleshooting. I bet they will respond by shrugging their shoulders and saying something along the lines of 'Well, I put in the time' or 'I just kept doing things.' So don't despair if you are stuck solving problem after problem during this training program. You are getting better at troubleshooting and problem solving.",
    "<b>Grumpledump song</b> This is a funny poem about people that complain a lot. But as a tester, we think the bugs raised here are valid ;) https://www.poets.org/poetsorg/poem/mr-grumpledumps-song",
    "<b>It's not ONLY you</b> Learning with this training program gets lonely and demotivating. It is natural for you to think that it is your fault that you have a backlog. Well, if you are feeling upset at yourself for not finishing sprints like clockwork, I have a simple reminder - it's not ONLY you! It's every single trainee that feels that way. Every. Single. Trainee. This course was designed to be hard. We want trainees to feel uncomfortable and desperate. And then when you are near your breaking point, we want to help. So chin up, forget about 'finishing tickets' and enjoy the journey.",
    "<b>Bike shedding</b> Bike shedding is the phenomenon of people spending time on things that are easy and avoiding things that need preparation and thinking. We share this article with employees and trainees to help them recognize this habit. http://bikeshed.com/",
    "<b>A crappy first version is NOT the same as sloppy work!</b> There is a difference between sloppy work and producing poor first versions. Sloppy work is when you can do better but produce poor quality work. A poor first version is often the result of you trying something new and hard. You should not be producing sloppy work. But you should be trying to produce poor first versions of work often.",
    "<b>T-shaped people</b> As the field of software testing keeps expanding, this article about T-shaped people will help you keep one foot in your expertise while landing your other foot in newer topics. https://www.facebook.com/notes/kent-beck/paint-drip-people/1226700000696195/",
    "<b>Look back at how far you have come</b> Today is a good time for you to look back and reflect on how far you have come in such a short period of time! Week in and week out you worry about how much more there remains to complete. And while that is a useful worry, don't forget that you have made some massive progress too. Allow yourself some time to look back and feel proud.",
    "<b>Career advice from Dilbert</b> Testers are not the best developers. We are not the best at DevOps. But when we combine our software testing skills with a touch of development and a dash of DevOps, we really stand out! https://dilbertblog.typepad.com/the_dilbert_blog/2007/07/career-advice.html",
    "<b>Thank you tweets</b> A lot of quiet, introverted people do not develop social profiles. But social accounts are a nice way to establish your credentials and will help you land your next opportunity easier! If you are quiet and have nothing to say, just try sending out thank you tweets to people whose work (articles, presentations, talks, etc) that you use as part of work.",
    "<b>Situations we simulate</b> Following are some of the common work situations that our training program mimics: \n1. Reading other people's code \n2. Reusing existing code and making it work. You inherit automation code that you then need to clean up \n3. Many times at work, the setup instructions have become obsolete. Newer versions of the software tools you are using have been released making life easier \n4. Getting blocked and waiting to be unblocked. This happens at work. You need to know how to adapt \n5. Presenting your work \n6. Multi-tasking \n7. Not getting immediate access to systems \n8. Troubleshooting",
    "<b>Adaptive vs Technical challenges</b> Technical challenges are solved by knowledge and training. But there are some challenges that evolve as you solve them. These are adaptive challenges. Parenting is probably is the most relatable example of an adaptive challenge. Adaptive challenges not only need technical skills but they also need constant engagement, fresh mindsets and ever-improving mental models. As you continue your journey through Qxf2, remember this critical distinction. It is not enough that you just execute the tasks given to you. You need to periodically introspect and evaluate if the work is changing your habits, mindset and perspective.",
    "<b>Parkinson's law</b> Time-boxing is an essential part of the <i>doing and then learning</i> strategy that is emphasized in this training  program. If you feel like you need large amounts of time, think about Parkinson's Law: https://en.wikipedia.org/wiki/Parkinson%27s_law",
    "<b>A tip for the next 12-months</b> I have a simple tip to make your learning so much easier. Stop asking what-is-the-use-of-doing-X? and just do X. Its ok if nobody else you know is doing X. Over time, you will notice that doing X had multiple benefits that neither you nor me could have predicted (called emergent-behavior in a complex system) and you will be better off for having tried.",
    "<b>Career calculus</b> Read this article and then think about how it applies to your career! https://ericsink.com/Career_Calculus.html",
    "<b>Bad beginnings</b> Our schooling did a great job of instilling values of hard work, discipline, logical thinking and holding ourselves to high standards. I wish they had taken the time to explain that those characteristics are good in most contexts but not all! A specific context where most of those supposed strengths fail is when you attempt to do something new. You can get over this bias though. The next time you start something new, remind yourself that it is natural to struggle and be clueless when doing new things.",
    "<b>What can you teach us?</b> As you go through this training course, please keep a lookout for ways you can help us. While we are conducting the training program, Qxf2 knows we are not good enough. We would love to pick up stuff from all our trainees too!",
    "<b>Update your LinkedIn profile</b> This is a reminder to make sure you are updating your LinkedIn profile periodically.",
    "<b>There is no happily every after</b> As you progress through this training, hopefully, you are adding new techniques and capabilities to your testing toolbelt. You might even start wondering what the happily-ever-after scenario will look like. While this may seem like a good question, make peace with leaving it unanswered. I feel like the question comes from societal conditioning. We have always been told that if we work hard during insert-critical-life-phase-here, things will become easy after that. Instead of adopting this (imo) poor mental model, just view learning as a side-effect of solving problems and do not really worry about where all this is going to culminate.",
    "<b>Mixed bag is not the same as mediocre</b> A mixed bag has high-highs and low-lows. Mediocre performance is when you are average all through - you neither impress nor annoy. When I say it is ok to fail at clients, I am implicitly assuming there are already some things you do well. If you fail at a specific task because you chose something new, it will be ok because nobody is expected to be good at everything. A mixed bag of performance has a tremendous upside for your own career.",
    "<b>Your technical powers and test ideas are supposed co-evolve</b> Your QA output should not be your previous output plus one or two new tools you picked up in this training program. We are not trying to do your old job in an automated way. Instead, technical skills should expand the scope of what a QA engineer can do. All the technical skill and tooling you pick up is supposed to help you probe the software being tested in a more effective way. As you become more technical, you should be able to conduct tests that you previously could not even imagine. You should be able to understand the nuances of implementations and vary your tests accordingly.",
    "<b>Generalize your learning</b> A great way to keep up with ever-changing technologies is to generalize your learning. Generalizing lets you abstract many things into one concept. It helps you associate new tools with existing ones and brings down your cognitive load. For example, if I learnt to configure a Jenkins job, I would generalize my learning as follows. Jenkins solves the problem of a gigantic code merge by letting people continually integrate their code to the codebase in small increments. It does this by removing the need of having a human do a build-test-merge. Instead, it provided a web interface to write and execute shell commands before and after a build. If you can get to that level of abstraction, any new CI tool can be tackled easily. You simply have to figure out what interface the new tool provides and how to describe your build-test-merge steps in that tool.",
    "<b>Technical QA != Automation</b> Please do not equate writing automation to being technical. Technical QA involves being able to understand systems and design tradeoffs, adhere to good engineering principles, perform complex setup operations, create tools to enable other QA and much more. I want us to be technical QA. That is very different from wanting folks who can write automated tests.",
    "<b>Companies do not go obsolete ... employees do.</b> ITeS companies in India have the reputation of doing outdated work. The media and our peers tend to talk of them as going obsolete. I have news for you. Every major Indian ITeS provider has been around for more than three decades. They evolved and remained relevant from the pre-Internet era to today. But most employees who did very well for these companies ended up becoming obsolete with every new wave of technology. This happened because they passively executed what their client or boss wanted. Do not make the same mistake. Make sure you are choosing tasks that simultaneously benefit your client, Qxf2 and <i>you</i>.",
    "<b>Getting off autopilot is exhausting but essential</b> If you are in the early days of this training program, please make an effort to get off autopilot. Try to think actively throughout the day. This tiring and requires a lot more energy on your part. It is especially hard because you are really good at your current job. So good that you are able to go on autopilot for the most part. One of the reasons the first several weeks at of training is challenging is that you are (hopefully!) not given a chance to be on autopilot. PS: This is not an original insight. I came across it when reading literature about learning.",
    "<b>Unconscious competence</b> I do not like the habit of keeping a long list of commands/instructions/procedures that you can then copy-paste or blindly follow. Keeping notes that you copy-paste from does not engage your brain sufficiently. This habit also prevents you from achieving a key stage in learning that people call <i>unconscious competence</i>. If you keep a file with a bunch of commands that have worked for you in the past and then copy-pasting commands/instructions/procedures, please try to limit this habit. Make an attempt to understand what is going on and that will help you commit the steps to memory.",
    "<b>Pro-tip: Setup a GitHub profile for yourself</b> You will be surprised at how the frontiers of technical recruiting have changed. There are sophisticated algorithms that trawl LinkedIn and GitHub and reach out to engineers with good profiles. So make an effort to have a nice GitHub profile. Here is an article showing you how: https://www.aboutmonica.com/blog/how-to-create-a-github-profile-readme",
    "<b>Share your learning</b> Get into the habit of sharing your learning. It is ok if what you are sharing has been done ad nauseam. Your perspective might help another beginner. And even your shared work does not help anyone, you get better just making it and taking the effort to share it. So do not wait until you become an expert. Share what you learn even when you are beginner.",
    "<b>Great resource for articles about testing</b> We found this link compiled by an Internet Famous tester to be excellent reading. When you are bored, try reading any one of the links and discuss with your colleagues. https://www.huibschoots.nl/wordpress/?page_id=441",
    "<b>A good talk about automation</b>As you become a more technical tester, you will need to engage in many conversations to influence your team and influence developers. Finding the right ideas and using the right words is going to matter more and more. We found this talk about automation a good resource for talking about what we intend to do as testers and how automation fits that picture: https://www.youtube.com/watch?v=uIDvGzQdoxc",
    "<b>Different architectures</b> Understanding the architectural patterns in applications will help you test applications better. We like this talk about this subject: https://www.youtube.com/watch?v=tpspO9K28PM .... <i>PS:</i> This is a fairly advanced and abstract talk. If you are not able to tie it to testing, that is ok!",
    "<b>How do other companies test?</b>When I was starting out in the QA space, I read a book called How Microsoft Tests Software. It introduced me to a lot of patterns and situations that I had previously not thought through. I still frequently Google for how other companies manage their testing. Recently, I stumbled upon this interesting talk by Netflix that packs so many good ideas and details about how microservices architectures can fail: https://www.youtube.com/watch?v=CZ3wIuvmHeM",
    "<b>Am I doing this right?</b> When you working on new things, it is normal to be able to do the task but feel inadequate and under-confident. Often times, you will ask yourself if you are on the right path. You will question if you have made the right choices. You will wonder if there is a better way to what you just did. I do not know of a single person who can avoid such self-doubt. In fact it healthy and lets us explore! The trick is in being to continually execute inspite of such self-doubt. The next time you find yourself avoiding a specific task, remind yourself that such self-doubt is normal and probably useful for your career!",
    "<b>A gentle introduction to testing microservices by Maxim Novak</b> If you are completely new to testing microservices, watch this talk. It starts from describing how you would test a monolith and proceeds to show some common patterns and beginner approaches to testing microservices: https://www.youtube.com/watch?v=BhjFUVuPa2U",
    "<b>Tangential skills</b>If you find the time today, try learning about one of these topics by watching a 10-minute YouTube video: typography, choosing colors, how to make good slides, using whitespace in design, producing sketch notes, advanced Google search hacks, how to type faster, how to draw good graphs. Pick a topic every other week and learn about it. Soon you will have a lot of exposure to different skills.",
    "<b>Easing into reading</b> For today, pick some book you always wanted to read and look up its summary on YouTube. Do not watch videos longer than 15-minutes. If you feel comfortable, share the video you watched on the etc, etc, etc channel.",
    "<b>Look for tech everywhere</b> An easy way to be creative is to combine ideas from different worlds. For today, YouTube search <i>tech used in ______</i> where _____ is anything you like in life. Do not watch videos longer than 15-minutes. If you feel comfortable, share the video you found on the etc, etc, etc channel.",
    "<b>End-to-End Automated Testing in a Microservices Architecture by Emily Bache</b> We really like this talk about end to end testing in a microservices architecture based application. The speaker takes you through the evolution of testing strategies and the kind of adjustments she (and her team) made along the way. Watch it an takes notes of the language, the concepts and the diagrams! https://www.youtube.com/watch?v=vq8o_AFfHhE",
    "<b>Increase your technical exposure</b> You do not have to discontinue your learning after this training finishes. We devised many small exercisrs to help you micro-learn on a daily basis. You can check out some of the ideas here: https://trainingseniorqa.com/how-increase-technical-exposure",
    "<b>Getting better without increasing knowledge</b> Most people think the only way to become better at their jobs is by learning some new tools or techniques that they can add to their resume. This approach is valid as long as you have a lot of time on your hands. After that, working on your thinking is going to have a far larger impact on getting better. Your ability to generalize, abstract, relate, chunk, synthesize and combine are going to help you stay relevant and competitive. So do yourself a favour and start thinking about how you think. Observe how other think in similar situations. If you need to Google for this stuff, try searching for <i>meta-cognition</i> or <i>conceptual understanding</i>.",
    "<b>You are responsible for your career</b> The person most responsible for your career is you. You manager is <i>also</i> responsible for your career. Your employer is <i>also</i> responsible for your career. But at the end of the day, they do not suffer if your career goes south. So when you pick tasks, try to get better. If you are handed tasks, modify your approach just enough to learn new things. If you are repeatedly working on the same thing, try it with a different toolbelt or a different process or a different mindset.",
    "<b>Occasional failure is better than perfectionism</b> The one common aspect among our trainees is that they seem to impose unreasonably high standards on themselves. On a daily basis, they have been choosing really safe options at work just to avoid failing. They have repeatedly shied away from expanding their horizons if it meant leaving their comfort zones. Over time, this has gotten them to lose touch with the current state of technology. My advice would be to adopt a mental model where it is ok for you to fail occasionally. Continue to succeed a majority of the time. But now and then, pick one or two tasks where you will look foolish and fail. It is ideal if you can pick some lower risk tasks to fail. Do this a few times and you will notice that the failing is not as bad as you imagined. And what is more, your ability to learn and grow will improve!",
    "<b>Learn, execute ... share and choose!</b> When you come out of this training program, we hope you have picked up more habits than just learning and executing. A big part of our attempt in this training program is to make you get used to sharing your work and also choosing your next step. Folks that do these two habits well will see a huge rise in their market value. It is not just companies, but co-workers too, who will appreciate your ability to choose interesting next steps and your willingness to share what you learn. So for today, think about how you have exercised your sharing and choosing muscles during this training.",
    "<b>Incomplete side-projects</b> Once you become more technical, you are bound to start multiple projects. This message is a reminder that if you reach that stage, you are in no obligation to finish them! Just do what seems fun and interesting. Keep your perfectionist tendencies at bay for a while. I say this from my own experience as well as the experience of several of my friends. Folks that have sustained a steady interest in technical work are always tinkering around with mutliple ideas.",
    "<b>Steady small steps</b> I hope you have noticed breaking tasks down into smaller parts has been an underlying idea of this training program. This habit is very useful in accelerating your learning and increasing your productivity. This talk is a good explanation of the benefits of breaking tasks into smaller steps: https://www.youtube.com/watch?v=FKTxC9pl-WM",
    "<b>Exposure is a measure of experience</b> The idea of experience being measured in years is somewhat strange. Some people have 1-year of experience ten times over. I prefer treating technical exposure as a better (yet imperfect) measure of experience. The more ideas you are exposed to, the richer and more relevant your testing is going to be. This exposure does not have to be passive or driven by your employer. You can try to increase your technical exposure actively - sign up for newsletter, read about a variety of topics, try new tasks, watch talks, etc. Do this sort of micro-learning daily and you will soon find yourself confident about the value you bring to the table.",
    "<b>Listen to extend, not understand</b> Many of our trainees are low on confidence about their technical skills. This low confidence leads to a strange negative feedback loop. They enter technical conversations with the goal of understanding what is being said. Invariably, there are going to be words or concepts they do not understand. This leads them to go silent and think they will go back home and study that new concept. Over time, people start noticing that the tester is not participating in technical conversations and they tag them as non-technical. How do you break this loop? Enter conversations with the mindset of trying to extend ideas rather than just understanding conversations. When you do this, you will invariably give the testability point of view to the conversation. This will help your team see the value you bring and they will be more likely to help you fill in the technical gaps because you are helping them fill in testability gaps.",
    "<b>Be curious about how things work</b> Knowing how things work will help you test better. This habit will expand your testing (not replace your current tests!) and make you much more creative in terms of what and how you test software. A nice test for knowing how things work is if you can draw a block diagram outlining the components and the functioning of the system. Try sketching out the product you are currently testing at work. Figure out what parts you know well (detailed block diagram) and which ones are fuzzy. Now start looking to learn more about the parts that are fuzzy. This is a good starting point to get more technical about your own product.",
    "<b>Emergence</b> This training program recommends purposeless micro-learning on a daily basis. What you learn is immaterial. What matters is the habit. Why does the habit matter more than what is being learnt? Because a collection of ideas form patterns that no single idea on its own can. This concept called is Emergence. You can read more about it here: https://necsi.edu/emergence",
    "<b>Talking about testing</b> Every QA professional that has a few years of experience testing ends up having a much broader view of what comprises testing. But communicating this knowledge to non-testers is tricky. Watch this talk as a refresher that will help you talk better about such topics: https://www.youtube.com/watch?v=jwKaiYLMHss",
    "<b>The hook pattern</b> You are most probably going to run into the hook pattern if you are writing code. You you can think of them certain methods that are called when the program starts/finish a stage. For example, a test runner (like pytest) will have defined 'stages' like initialization, collection, execution, reporting, etc. A hook simply lets you write code that you want executed when a stage either starts or finishes. Here is a practical example in Python: https://refactoring.guru/design-patterns/template-method/python/example",
    "<b>The actor model</b> Functional and Object Oriented Programming are not the only models of software. There are plenty of other ways to design software. A nice model (expecially for concurrency) is called the Actor model. You can read this piece to get an introduction https://www.brianstorti.com/the-actor-model/",
    "<b>Sign up for newsletters</b> A good way to increase your exposure is to sign up for newsletters. Sign up for a few newsletters based on your interests. As a start, we encourage you sign up for at StackOverflow newsletter - https://stackoverflow.blog/tag/newsletter/",
    "<b>Follow famous software people on Twitter</b> Twitter is useful as a source of new technical information. You do not have to be actively tweeting to get the benefit. In fact, you can just be a lurker and get whole lot of value. Google around for some famous software people and follow them on Twitter.",
    "<b>Which are the top software testing conferences?</b> A fun way to increase your technical exposure is to find talks at good conferences. For today, try to Google for the best software testing conferences and then go to YouTube and watch some videos from them.",
    "<b>Tranferring testing skills to the whole team</b>We really like this talk on how to transfer your testing to the entire team: https://www.youtube.com/watch?v=O1v8jgyj3AM",
    "<b>What, when, how, where</b> As you get more technical, you should start describing tests in terms of what is being tested, when the tests will run, how the testing will be performed and where the tests will run. A test strategy that just outlines what to test or test cases is incomplete. A couple of decades ago, in the land of monolith web (or desktop) applications, the answers looked something like this: What - feature. When - a build was ready, nightly. How - exploratory tests. Where - on a test environment. With modern applications the answers are much more complex. Your answers today could look like this: what - tiny isolated change, when - before a commit, after a push, in CI, after a build is ready, nightly. How - exploratory tests, unit tests, API checks, GUI checks, contract tests, integration tests, etc. Where - on a developer machine, in the CI infrastructure, on a test environment, on staging, etc.",
    "<b>Testing is a team problem</b> If you are in an under-staffed testing team, the ideas on this talk are very useful: https://www.youtube.com/watch?v=LNEdzIZe33I"]